--------------------------------------------------------------------------------
--                             APPLICATION                                    --
--------------------------------------------------------------------------------

Notify:
--------------------------------------------------------------------------------

-> bt_gatt_notify()                                                             host/gatt.c

  | IF conn == NULL get the connection |
  --------------------------------------
  -> bt_gatt_foreach_attr()                                                     host/gatt.c
    -> notify_cb()                                                              host/gatt.c
  --------------------------------------

  -> gatt_notify()                                                              host/gatt.c
    -> bt_att_create_pdu()                                                      host/att.c
    -> bt_l2cap_send()                                                          host/l2cap_internal.h
      -> bt_l2cap_send_cb()                                                     host/l2cap.c            The function want a parameter cb that is null because notify (bt_conn_tx_cb_t = NULL)
        -> bt_conn_send_cb()                                                    host/conn.c             The function want a parameter cb that is null because notify (bt_conn_tx_cb_t = NULL)
          -> net_buf_put(&conn->tx_queue, buf)                                  subsys/net/buf.c

Indicate:
--------------------------------------------------------------------------------

-> bt_gatt_indicate()                                                           host/gatt.c

  | IF conn == NULL get the connection |
  --------------------------------------
  -> bt_gatt_foreach_attr()                                                     host/gatt.c
    -> notify_cb()                                                              host/gatt.c
  --------------------------------------

  -> gatt_indicate()                                                            host/gatt.c
    -> bt_att_create_pdu()                                                      host/att.c
    -> gatt_send()                                                              host/gatt.c            take parameter bt_att_func_t gatt_indicate_rsp defined in host/gatt.c

    | IF params != NULL |
    ---------------------
    -> bt_att_req_send()                                                        host/att.c
      -> att_send_req()                                                         host/att.c
    --------
    | ELSE |
    --------
    -> bt_att_send()                                                            host/att.c
    --------------------

    -> att_cb()                                                                 host/att.c              return the callback function depending data type. this case attr_req_sent
    -> bt_l2cap_send_cb()                                                       host/l2cap.c
      -> bt_conn_send_cb()                                                      host/conn.c
        -> net_buf_put(&conn->tx_queue, buf)                                    subsys/net/buf.c

--------------------------------------------------------------------------------
--                                  SEND                                      --
--------------------------------------------------------------------------------

-> hci_tx_thread() THREAD                                                       host/hci_core.c
  -> bt_conn_prepare_events()                                                   host/conn.c
  -> k_poll()                                                                   kernel/poll.c
    -> is_condition_met() check if the queue is empty, if not ev->state != null kernel/poll.c
  -> process_events()                                                           host/hci_core.c

    | IF ev->state = BT_EVENT_CONN_TX_NOTIFY | (conn->tx_notify is not empty)
    ------------------------------------------
    -> bt_conn_notify_tx()                                                      host/conn.c
      -> cb ????????????????????? find out what is the callback function
      -> tx_free()

    | IF ev->state = BT_EVENT_CONN_TX_QUEUE | (conn->tx_queue is not empty) for notification and indication
    -----------------------------------------
    -> bt_conn_process_tx()                                                     host/conn.c
      -> net_buf_get(&conn->tx_queue, K_NO_WAIT)
      -> send_buf(conn, buf)                                                    host/conn.c
        -> send_frag()                                                          host/conn.c           Slipt the data in several packet
          -> bt_conn_notify_tx()    SEE ABOVE                                   host/conn.c
            -> bt_send()                                                        host/hci_core.c
              -> bt_dev.drv->send()                                             host/hci_core.h
                -> (CONTROLLER) hci_driver_send()                               controller/hci_driver.c

    | IF ev->state = BT_EVENT_CMD_TX | (bt_dev.cmd_tx_queue is not empty)
    ----------------------------------
    -> send_cmd()                                                               host/hci_core.c
      -> net_buf_get(&bt_dev.cmd_tx_queue)                                      subsys/net/buf.c
      -> bt_send()                                                              host/hci_core.c
        -> bt_dev.drv->send()                                                   host/hci_core.h
          -> (CONTROLLER) hci_driver_send()                                     controller/hci_driver.c

        /!\ IMPORTANT /!\
        -----------------
        1. bt_dev           struct bt_dev           host/hci_core.h
        2. drv              struct bt_hci_driver    controller/hci_driver.c
        -> bt_hci_driver_register(drv)              host/hci_raw.c
            { bt_dev.drv = drv }

--------------------------------------------------------------------------------
--                               RECEIVE                                      --
--------------------------------------------------------------------------------

-> (CONTROLLER) prio_recv_thread() THREAD                                       Controller/hci/hci_driver.c
  -> bt_recv_prio()                                                             host/hci_core.c

    | IF BT_HCI_EVT_NUM_COMPLETED_PACKETS |
    ---------------------------------------
    -> hci_num_completed_packets()                                              host/hci_core.c
      ->k_fifo_put(&conn->tx_notify, node);                                     the event will be handled in hci_TX_thread()

    ----------------------------
    | IF BT_HCI_EVT_CMD_STATUS |
    ----------------------------
    -> hci_cmd_status()                                                         host/hci_core.c
      -> hci_cmd_done()                                                         host/hci_core.c

    | IF BT_HCI_EVT_CMD_COMPLETED |
    -------------------------------
    -> hci_cmd_complete()                                                       host/hci_core.c
      -> hci_cmd_done()                                                         host/hci_core.c

--------------------------------------------------------------------------------

-> (CONTROLLER) recv_thread() THREAD                                            Controller/hci/hci_driver.c
  -> bt_recv()                                                                  host/hci_core.c

    | IF CONFIG_BLUETOOTH_RECV_IS_RX_THREAD |
    -----------------------------------------
      | IF BT_BUF_EVT | connection and disconnection from central and when the connection parameter changed
      -----------------
      -> hci_event()                                                            host/hci_core.c

      | IF BT_BUF_ACL_IN |  read, write, activate notify, activate indication, indication response
      --------------------
      -> hci_acl()                                                              host/hci_core.c

    --------
    | ELSE |
    --------
    -> net_buf_put(bt_dev.rx_queue)                                             subsys/net/buf.c      the event will be handled in hci_RX_thread()
    -----------------------------------------

--------------------------------------------------------------------------------

| IF NOT CONFIG_BLUETOOTH_RECV_IS_RX_THREAD |
---------------------------------------------
-> hci_rx_thread()   THREAD                                                     host/hci_core.c
  -> net_buf_get(bt_dev.rx_queue)                                               subsys/net/buf.c

  | IF BT_BUF_EVT | connection and disconnection from central and when the connection parameter changed
  -----------------
  -> hci_event()                                                                host/hci_core.c

  | IF BT_BUF_ACL_IN |  data (read, write, activate notify, activate indication, indication response, service discovery)
  --------------------
  -> hci_acl()                                                                  host/hci_core.c

--------------------------------------------------------------------------------
-> hci_event()

	  | IF BT_HCI_EVT_DISCONN_COMPLETE |   When the central want to disconnect
    ----------------------------------
		-> hci_disconn_complete(buf)

	  | IF BT_HCI_EVT_LE_META_EVENT |  When the central update the connection parameter
    -------------------------------
		-> hci_le_meta_event(buf)
