
--------------------------------------------------------------------------------
--                                  SEND                                      --
--------------------------------------------------------------------------------
-> hci_driver_send()                                                            controller/hci_driver.c

  | IF BT_BUF_ACL_OUT | Send indication or notification
  ---------------------
  -> hci_acl_handle()                                                           controller/hci.c
  -> radio_tx_mem_acquire()       \_ push data within tx queue _radio.pkt_tx    Controller/ll_sw/ctrl.c
  -> radio_tx_mem_enqueue()       /                                             Controller/ll_sw/ctrl.c

  | IF BT_BUF_CMD | other command
  -----------------
  -> cmd_handle()                                                               controller/hci_driver.c
    -> hci_cmd_handle()                                                         controller/hci.c

    	  | IF BT_OGF_LINK_CTRL |
        -----------------------
    		  -> link_control_cmd_handle(ocf, cmd, &evt)

    	  | IF BT_OGF_BASEBAND |
        ----------------------
    		  -> ctrl_bb_cmd_handle(ocf, cmd, &evt)

    	  | IF BT_OGF_INFO |
        ------------------
    		  -> info_cmd_handle(ocf, cmd, &evt)

    	  | IF BT_OGF_LE |
        ----------------
    		  -> controller_cmd_handle(ocf, cmd, &evt)

    -> (HOST) bt_recv_prio()                                                    host/hci_core.c

--------------------------------------------------------------------------------
--                               RECEIVE                                      --
--------------------------------------------------------------------------------

-> prio_recv_thread() THREAD                                                    Controller/hci/hci_driver.c
  -> radio_rx_get(&node_rx)                                                     Controller/ll_sw/ctrl.c
  -> (HOST) bt_buf_get_rx(BT_BUF_EVT)                                           host/hci/hci_core.c
  -> hci_num_cmplt_encode()                                                     Controller/hci/hci.c
  -> (HOST) bt_recv_prio()                                                      host/hci_core.c

  -> radio_rx_dequeue()                                                         Controller/ll_sw/ctrl.c
  -> k_fifo_put(&recv_fifo, node_rx);

--------------------------------------------------------------------------------

-> recv_thread() THREAD                                                         Controller/hci/hci_driver.c

  | IF CONFIG_BLEUTOOTH_HCI_ACL_FLOW_CONTROL |
  --------------------------------------------
  -> k_poll()                                                                   kernel/poll.c
    -> is_condition_met() check if the queue is empty, if not ev->state != null kernel/poll.c
  -> process_hbuf()                                                             Controller/hci/hci_driver.c
  --------
  | ELSE |
  --------
  -> k_fifo_get(&recv_fifo);
  --------------------------------------------

  -> process_node()                                                             Controller/hci/hci_driver.c
    -> encode_node()                                                            Controller/hci/hci_driver.c

      | IF HCI_CLASS_EVT_DISCARDABLE ||  HCI_CLASS_EVT_REQUIRED || HCI_CLASS_EVT_CONNECTION | connection parameter, disconnection, get service
      -----------------------------
      -> (HOST) bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);                           host/hci/hci_core.c
			-> hci_evt_encode(node_rx, buf);                                          Controller/hci/hci.c

      | IF HCI_CLASS_ACL_DATA | data (write ,read, active indication, indication response, notification, service discovery)
      -------------------------
      -> (HOST) bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);                        host/hci/hci_core.c
  		-> hci_acl_encode(node_rx, buf);                                          Controller/hci/hci.c

  -> (HOST) bt_recv(buf)                                                        host/hci_core.c

--------------------------------------------------------------------------------
--                               ISR                                          --
--------------------------------------------------------------------------------

-> isr()

  | IF STATE_TX |
  ---------------
  -> isr_radio_state_tx()                                                       Controller/ll_sw/ctrl.c

    | IF ROLE_ADV |
    ---------------

    | IF ROLE_SCAN |
    ----------------

    | IF ROLE_SLAVE |
    -----------------

    | ROLE_SLAVE |
    --------------

  -----------------------------------------------------

  | IF STATE_RX |
  ---------------
  -> isr_radio_state_rx()                                                       Controller/ll_sw/ctrl.c

    | IF ROLE_ADV |
    ---------------
    -> isr_rx_adv()                                                             Controller/ll_sw/ctrl.c

    | IF ROLE_SCAN |
    ----------------
    -> isr_rx_scan()                                                            Controller/ll_sw/ctrl.c

    | IF ROLE_SLAVE || ROLE_SLAVE |
    -------------------------------
/!\ -> isr_rx_conn()                                                            Controller/ll_sw/ctrl.c
      -> isr_rx_conn_pkt()

        PDU_DATA_LLID_CTRL
        ------------------
        -> ist_rx_conn_pkt_ctrl()
          PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND
          PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND
          PDU_DATA_LLCTRL_TYPE_TERMINATE_IND
          PDU_DATA_LLCTRL_TYPE_ENC_REQ
          PDU_DATA_LLCTRL_TYPE_ENC_RSP
          PDU_DATA_LLCTRL_TYPE_START_ENC_REQ
          PDU_DATA_LLCTRL_TYPE_START_ENC_RSP
          PDU_DATA_LLCTRL_TYPE_FEATURE_REQ
          PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ
          PDU_DATA_LLCTRL_TYPE_FEATURE_RSP
          PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ
          PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP
          PDU_DATA_LLCTRL_TYPE_VERSION_IND
          PDU_DATA_LLCTRL_TYPE_REJECT_IND
          PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ
          PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP
          PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND
          PDU_DATA_LLCTRL_TYPE_PING_RSP
          PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP
          PDU_DATA_LLCTRL_TYPE_PING_REQ
          PDU_DATA_LLCTRL_TYPE_LENGTH_RSP
          PDU_DATA_LLCTRL_TYPE_LENGTH_REQ
          PDU_DATA_LLCTRL_TYPE_PHY_REQ
          PDU_DATA_LLCTRL_TYPE_PHY_REQ
          LLCP_PHY_STATE_UPD
          PDU_DATA_LLCTRL_TYPE_PHY_RSP
          PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND

      PDU_DATA_LLID_DATA_CONTINUE
      PDU_DATA_LLID_DATA_START

        -> isr_rx_conn_pkt_ack()
        -> isr_rx_conn_pkt_release()

  -----------------------------------------------------

  | IF STATE_CLOSE | STATE_STOP | STATE_ABORT |
  ---------------------------------------------
  -> isr_radio_state_close()                                                      Controller/ll_sw/ctrl.c

    | IF ROLE_ADV |
    ---------------
    -> isr_close_adv()                                                            Controller/ll_sw/ctrl.c

    | IF ROLE_SCAN |
    ----------------
    -> isr_close_scan()                                                           Controller/ll_sw/ctrl.c

    | IF ROLE_SLAVE || ROLE_SLAVE |
    -------------------------------
    -> isr_close_conn()                                                           Controller/ll_sw/ctrl.c

--------------------------------------------------------------------------------
--                               GET RX PACKET                                --
--------------------------------------------------------------------------------

-> event_master() / event_slave() / isr_radio_state_tx()
  -> rx_packet_set( _radio.packet_rx[_radio.packet_rx_last]->pdu_data )         Controller/ll_sw/ctrl.c
    -> radio_phy_set()
    -> radio_pkt_configure()
    -> radio_pkt_rx_set()                                                       controller/hal/nrf5/radio.c
      ->  NRF_RADIO->PACKETPTR = rx_packet

--------------------------------------------------------------------------------
--                               SEND TX PACKET                               --
--------------------------------------------------------------------------------

-> event_master() / isr_rx_conn()
  -> tx_packet_set()                                                            Controller/ll_sw/ctrl.c
    -> radio_phy_set()
    -> radio_pkt_configure()
    -> radio_pkt_tx_set()                                                       controller/hal/nrf5/radio.c
      -> NRF_RADIO->PACKETPTR = tx_packet

--------------------------------------------------------------------------------
--                             ISR  CONFIGURATION                             --
--------------------------------------------------------------------------------
Configure the isr to handle bluetooth event

-> adv_scan_conn_configure()                                                    Controller/ll_sw/ctrl.c
	-> radio_reset()
	-> radio_tx_power_set(0)
	-> radio_isr_set(isr)                                                         controller/hal/nrf5/radio.c

--------------------------------------------------------------------------------
--                             QUEUE  CONFIGURATION                           --
--------------------------------------------------------------------------------

-> radio_init()
  -> _radio.packet_rx = (void *)mem_radio;              /* initialise rx queue memory */
  -> mem_radio += (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

  -> _radio.pkt_tx = (void *)mem_radio;                 /* initialise tx queue memory */
  -> mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

  -> _radio.pkt_release = (void *)mem_radio;            /* initialise tx release queue memory */
  -> mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

--------------------------------------------------------------------------------

packet_tx_enqueue() push n packets from _radio.pkt_tx to conn->pkt_tx_data of the current connection
packet_rx_enqueue()

radio_rx_dequeue()  dequeue packets received
radio_rx_get()      get packets received

isr_rx_conn_pkt_ack()
isr_rx_conn_pkt_release()
isr_rx_conn_pkt_ctrl_rej_conn_upd()
isr_rx_conn_pkt_ctrl_rej_dle()
isr_rx_conn_pkt_ctrl_rej_phy_upd()
isr_rx_conn_pkt_ctrl_rej()
isr_rx_conn_pkt_ctrl_dle()
isr_rx_conn_pkt_ctrl()
isr_rx_conn_pkt()
